buildscript {
    repositories {
        maven {
            // RetroFuturaGradle
            name 'GTNH Maven'
            url 'https://nexus.gtnewhorizons.com/repository/public/'
            mavenContent {
                includeGroup 'com.gtnewhorizons'
                includeGroup 'com.gtnewhorizons.retrofuturagradle'
            }
        }
        gradlePluginPortal()
        mavenCentral()
        mavenLocal()
    }

}
apply {
    plugin 'java'
    plugin 'java-library'
    plugin 'com.gtnewhorizons.retrofuturagradle'
    plugin 'org.jetbrains.gradle.plugin.idea-ext'
    plugin 'com.matthewprenger.cursegradle'
}

version = project.mod_version
archivesBaseName = project.archives_base_name

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'

    // Set username here, the UUID will be looked up automatically
    username = 'Developer'

    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug=true'
    }
    extraRunJvmArguments.addAll(args)

}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'BlameJared'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'Elytra'
        url 'https://repo.elytradev.com'
    }
}

dependencies {
    if (project.use_mixins.toBoolean()) {
        implementation 'zone.rong:mixinbooter:8.9'
    }

    implementation project(':Api')
    implementation fileTree(dir: '../../libs', includes: ['*.jar'])

    if (project.use_mixins.toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins('zone.rong:mixinbooter:8.9', "projecteintegration.refmap.json")
        api(mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:24.1.1-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor(mixin) {
            transitive = false
        }
    }
}

jar {}

tasks.named("sourcesJar").configure {
    dependsOn("classes")
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    //classifier = 'sources'
}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output
    //classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives deobfJar
}
